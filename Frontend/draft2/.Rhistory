round(diag(vcov(M2)),4)
round(diag(vcov(M3)),4)
round(diag(vcov(M4)),4)
round(diag(vcov(M5)),4)
round(diag(vcov(M6)),4)
pullstrength <- read.csv("../data/pullstrength.csv", header = TRUE)
M1 = lm(y~x1, data=pullstrength)
M2 = lm(y~x1+x2, data=pullstrength)
M3 = lm(y~x1+x2+x3, data=pullstrength)
M4 = lm(y~x1+x2+x3+x4, data=pullstrength)
M5 = lm(y~x1+x2+x3+x4+x5, data=pullstrength)
M6 = lm(y~x1+x2+x3+x4+x5+x6, data=pullstrength)
round(diag(vcov(M1)),4)
round(diag(vcov(M2)),4)
round(diag(vcov(M3)),4)
round(diag(vcov(M4)),4)
round(diag(vcov(M5)),4)
round(diag(vcov(M6)),4)
pullstrength <- read.csv("../data/pullstrength.csv", header = TRUE)
M1 = lm(y~x1, data=pullstrength)
M2 = lm(y~x1+x2, data=pullstrength)
M3 = lm(y~x1+x2+x3, data=pullstrength)
M4 = lm(y~x1+x2+x3+x4, data=pullstrength)
M5 = lm(y~x1+x2+x3+x4+x5, data=pullstrength)
M6 = lm(y~x1+x2+x3+x4+x5+x6, data=pullstrength)
round(diag(vcov(M1)),4)
round(diag(vcov(M2)),4)
round(diag(vcov(M3)),4)
round(diag(vcov(M4)),4)
round(diag(vcov(M5)),4)
round(diag(vcov(M6)),4)
SMSA.dat <- read.table("../data/SMSA.txt", header = TRUE)
attach(SMSA.dat)
library(MASS)
install.packages("MASS")
pullstrength <- read.csv("../data/pullstrength.csv", header = TRUE)
M1 = lm(y~x1, data=pullstrength)
M2 = lm(y~x1+x2, data=pullstrength)
M3 = lm(y~x1+x2+x3, data=pullstrength)
M4 = lm(y~x1+x2+x3+x4, data=pullstrength)
M5 = lm(y~x1+x2+x3+x4+x5, data=pullstrength)
M6 = lm(y~x1+x2+x3+x4+x5+x6, data=pullstrength)
round(diag(vcov(M1)),4)
round(diag(vcov(M2)),4)
round(diag(vcov(M3)),4)
round(diag(vcov(M4)),4)
round(diag(vcov(M5)),4)
round(diag(vcov(M6)),4)
(MASS)
library(MASS)
library(MASS)
y=doctor; x1=Land; x2=T.p; x3=P.city; x4=p.65; x5=beds; x6=h.sch; x7=labor; x8=income; x9=crimes; x10=factor(region)
p=data.frame(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)
SMSA.dat <- read.table("../data/SMSA.txt", header = TRUE)
attach(SMSA.dat)
library(MASS)
y=doctor; x1=Land; x2=T.p; x3=P.city; x4=p.65; x5=beds; x6=h.sch; x7=labor; x8=income; x9=crimes; x10=factor(region)
p=data.frame(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)
lower.m = lm(y~1, data=p.dat)
lower.m = lm(y~1, data=df)
df=data.frame(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)
lower.m = lm(y~1, data=df)
upper.m = lm(y~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10, data=p.dat)
upper.m = lm(y~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10, data=df)
## (i)(a)
# Forward selection
forward=stepAIC(lower.m,scope=list(lower=~1,upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10),direction="forward")
# Backward
backward=stepAIC(upper.m,scope=list(upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10,
lower=~1),direction="backward")
summary(backward)
# Stepwise downwards
downwards=stepAIC(upper.m,scope=list(lower=~1, upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10),direction="both")
summary(downwards)
# Stepwise upwards
upwards=stepAIC(lower.m,scope=list(lower=~1, upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10),direction="both")
summary(upwards)
fselect=glm(y~x1+x2+x5+x8+x9+x10,data=df); summary(fselect)
## (iii)(a)
r=lm(y~x10,data=df)$resi
X1 = as.matrix(p.df[,2:10])
X1 = as.matrix(df[,2:10])
penal = cv.glmnet(X1, r)
coef(penal, s = penal$lambda.min)
X1 = as.matrix(df[,2:10])
penal = cv.glmnet(X1, r)
library(glmnet)
install.packages("glmnet")
library(glmnet)
library(glmnet)
X1 = as.matrix(df[,2:10])
penal = cv.glmnet(X1, r)
coef(penal, s = penal$lambda.min)
z=p.dat$x10; w =df$y
z=df$x10; w =df$y
u2 = rep(0,length(z)); u3=u2; u4=u2
u2[z==2] = 1; u3[z==3]=1; u4[z==4]=1
coef(penal.2, s = penal.2$lambda.min)
X2=cbind(X1,u2,u3,u4)
penal.2 = cv.glmnet(X2, w)
coef(penal.2, s = penal.2$lambda.min)
library(boot)
m1 = glm(y.p~x1+x3+x4+x5+x6+x8+x10,data=p.dat)
m2 = glm(y.p~x1+x3+x5+x6+x8+x9+x10,data=p.dat)
m1 = glm(y~x1+x3+x4+x5+x6+x8+x10,data=df)
m2 = glm(y~x1+x3+x5+x6+x8+x9+x10,data=df)
AIC(m1); AIC(m2);
BIC(m1); BIC(m2)
cv.1=cv.glm(data=df, m1)$delta[2]; cv.2=cv.glm(data=df, m2)$delta[2]
data.frame(model=c("M1", "M2"),AIC=c( AIC(m1),AIC(m2)),BIC=c(BIC(m1),BIC(m2)),CV=c(cv.1,cv.2))
M1 = glm(y~x1, data=pullstrength)
M2 = glm(y~x1+x2, data=pullstrength)
M3 = glm(y~x1+x2+x3, data=pullstrength)
M4 = glm(y~x1+x2+x3+x4, data=pullstrength)
M5 = glm(y~x1+x2+x3+x4+x5, data=pullstrength)
M6 = glm(y~x1+x2+x3+x4+x5+x6, data=pullstrength)
AIC=c(AIC(M1), AIC(M2),AIC(M3),AIC(M4),AIC(M5),AIC(M6))
BIC=c(BIC(M1), BIC(M2),BIC(M3),BIC(M4),BIC(M5),BIC(M6))
CV=c( cv.glm(pullstrength,M1)$delta[2], cv.glm(pullstrength,M2)$delta[2],
cv.glm(pullstrength,M3)$delta[2], cv.glm(pullstrength,M4)$delta[2],
cv.glm(pullstrength,M5)$delta[2],cv.glm(pullstrength,M6)$delta[2])
data.frame(Model, AIC,BIC,CV)
Model=c("M1","M2","M3","M4","M5","M6")
data.frame(Model, AIC,BIC,CV)
fselect=glm(y.p~x1+x2+x5+x8+x9+x10,data=p.dat); summary(fselect)
pullstrength <- read.csv("../data/pullstrength.csv", header = TRUE)
M1 = lm(y~x1, data=pullstrength)
M2 = lm(y~x1+x2, data=pullstrength)
M3 = lm(y~x1+x2+x3, data=pullstrength)
M4 = lm(y~x1+x2+x3+x4, data=pullstrength)
M5 = lm(y~x1+x2+x3+x4+x5, data=pullstrength)
M6 = lm(y~x1+x2+x3+x4+x5+x6, data=pullstrength)
round(diag(vcov(M1)),4)
round(diag(vcov(M2)),4)
round(diag(vcov(M3)),4)
round(diag(vcov(M4)),4)
round(diag(vcov(M5)),4)
round(diag(vcov(M6)),4)
fselect=glm(y.p~x1+x2+x5+x8+x9+x10,data=df); summary(fselect)
pullstrength <- read.csv("../data/pullstrength.csv", header = TRUE)
M1 = lm(y~x1, data=pullstrength)
M2 = lm(y~x1+x2, data=pullstrength)
M3 = lm(y~x1+x2+x3, data=pullstrength)
M4 = lm(y~x1+x2+x3+x4, data=pullstrength)
M5 = lm(y~x1+x2+x3+x4+x5, data=pullstrength)
M6 = lm(y~x1+x2+x3+x4+x5+x6, data=pullstrength)
round(diag(vcov(M1)),4)
round(diag(vcov(M2)),4)
round(diag(vcov(M3)),4)
round(diag(vcov(M4)),4)
round(diag(vcov(M5)),4)
round(diag(vcov(M6)),4)
fselect=glm(y~x1+x2+x5+x8+x9+x10,data=df); summary(fselect)
X2=cbind(X1,u2,u3,u4)
penal.2 = cv.glmnet(X2, w)
coef(penal.2, s = penal.2$lambda.min)
?
?summary
knitr::opts_chunk$set(echo = TRUE)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", header = TRUE)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx")
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", header = TRUE)
library(readxl)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", header = TRUE)
detach("package:readxl", unload = TRUE)
library(readxl)
install.packages("readxl")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", header = TRUE)
summary(data)
View(data)
data <- read_excel("../data/Restaurant_Grades_TMA.xlsx", header = TRUE)
library(readxl)
data <- read_excel("../data/Restaurant_Grades_TMA.xlsx", header = TRUE)
install.packages("tidyverse")
library(readxl)
data <- read_excel("../data/Restaurant_Grades_TMA.xlsx", header = TRUE)
summary(data)
data <- read_excel("../data/Restaurant_Grades_TMA.xlsx", header = FALSE)
data <- read_xlsx("../data/Restaurant_Grades_TMA.xlsx", header = FALSE)
data <- read_xlsx("../data/Restaurant_Grades_TMA.xlsx", header = TRUE)
data <- read_xlsx("../data/Restaurant_Grades_TMA.xlsx", header = TRUE, skip = 1)
data <- read.xlsx("../data/Restaurant_Grades_TMA.xlsx", header = TRUE, skip = 1)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", header = TRUE, skip = 1)
read.table(data, header = FALSE, sep = "", quote = "\"'")
library(readxl)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", header = TRUE, skip = 1)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", sep = "\t", header=TRUE)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", sep = "\t", header=TRUE)
data <- read_excel("../data/Restaurant_Grades_TMA.xlsx", sep = "\t", header=TRUE)
data <- read.table("../data/Restaurant_Grades_TMA.xlsx", sep = "\t", header=TRUE)
data <- read_xlsx("../data/Restaurant_Grades_TMA.xlsx", sep = "\t", header=TRUE)
data <- read_xl("../data/Restaurant_Grades_TMA.xlsx", sep = "\t", header=TRUE)
summary(data)
install.packages("xlsx")
data <- read_xl("../data/Restaurant_Grades_TMA.xlsx", sep = "\t", header=TRUE)
data <- read_excel("../data/Restaurant_Grades_TMA.xlsx")
View(data)
summary(data)
read.table(data)
summary <- summary(data)
tab <- table(summary)
tab <- table(summary)
tab
library(Matrix)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(ggplot2)
gpa <- read.table("../data/gpa.txt", header = TRUE)
y = gpa$GPA
x = gpa$ACT
x = gpa$ACT
gpa.fit = lm(y~x); summary(gpa.fit)
plot(x, y); abline(gpa.fit, col = "blue")
predict <- predict(gpa.fit,list(ACT=30), interval = "prediction")
predict
predict <- predict(gpa.fit,list(x=30), interval = "prediction")
predict
shiny::runApp('C:/NUS/NUS Y3S1/DSA3101/test01')
runExample()
runExample"04_mpg"
runExample("04_pmg")
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runExample("Shiny")
runExample("01_hello")
clear()
runExample()
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 35)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'red',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
C=matrix(c(1,0,0,
0,1,0,
0,0,1,
1,-1,-1,
-1,1,-1), ncol=3,byrow=T)
b=q1.fit$coef[-1];V=vcov(q1.fit)[-1,-1]
L = C%*%b
sd.L = sqrt(diag(C%*%V%*%t(C)))
y1=c(31.02, 24.03, 28.37, 26.57, 25.83, 25.87, 26.08, 24.89, 28.32, 29.98, 20.41, 20.31, 23.45)
y2=c(35.71, 34.83, 35.13, 38.30, 33.12, 42.07, 38.69, 43.16, 33.11, 42.47, 40.45, 31.95, 38.69, 42.26)
y3=c(25.85, 39.77, 32.88, 46.29, 33.07, 29.23, 31.39, 28.28, 22.43, 38.42)
y4=c(49.47, 42.29, 48.60, 47.10, 33.63, 32.00, 49.31, 50.81)
y = c(y1,y2,y3,y4)
A=factor(rep(c("N","Y","N","Y"),c(13,14,10,8)))
B=factor(rep(c("N","Y"),c(27,18)))
L=factor(rep(c(1,2,3,4), c(13,14,10,8)))
q1.dat =data.frame(y,A,B,L)
q1.fit=lm(y~L,data=q1.dat); summary(q1.fit); vcov(q1.fit)
Question 1(ii)
```{r}
C=matrix(c(1,0,0,
0,1,0,
0,0,1,
1,-1,-1,
-1,1,-1), ncol=3,byrow=T)
b=q1.fit$coef[-1];V=vcov(q1.fit)[-1,-1]
L = C%*%b
sd.L = sqrt(diag(C%*%V%*%t(C)))
T=L/sd.L
T
annova(q1.fit)
anova(q1.fit)
y4=c(49.47, 42.29, 48.60, 47.10, 33.63, 32.00, 49.31, 50.81)
y = c(y1,y2,y3,y4)
library(Matrix)
y1=c(31.02, 24.03, 28.37, 26.57, 25.83, 25.87, 26.08, 24.89, 28.32, 29.98, 20.41, 20.31, 23.45)
y2=c(35.71, 34.83, 35.13, 38.30, 33.12, 42.07, 38.69, 43.16, 33.11, 42.47, 40.45, 31.95, 38.69, 42.26)
y3=c(25.85, 39.77, 32.88, 46.29, 33.07, 29.23, 31.39, 28.28, 22.43, 38.42)
y4=c(49.47, 42.29, 48.60, 47.10, 33.63, 32.00, 49.31, 50.81)
y = c(y1,y2,y3,y4)
A=factor(rep(c("N","Y","N","Y"),c(13,14,10,8)))
B=factor(rep(c("N","Y"),c(27,18)))
L=factor(rep(c(1,2,3,4), c(13,14,10,8)))
q1.dat =data.frame(y,A,B,L)
q1.fit=lm(y~L,data=q1.dat); summary(q1.fit); vcov(q1.fit)
Question 1(ii)
```{r}
C=matrix(c(1,0,0,
0,1,0,
0,0,1,
1,-1,-1,
-1,1,-1), ncol=3,byrow=T)
b=q1.fit$coef[-1];V=vcov(q1.fit)[-1,-1]
L = C%*%b
sd.L = sqrt(diag(C%*%V%*%t(C)))
T=L/sd.L
anova(q1.fit)
```
C=matrix(c(1,0,0,
0,1,0,
0,0,1,
1,-1,-1,
-1,1,-1,
-1,-1,1
), ncol=3,byrow=T)
b=q1.fit$coef[-1];V=vcov(q1.fit)[-1,-1]
L = C%*%b
sd.L = sqrt(diag(C%*%V%*%t(C)))
T=L/sd.L
anova(q1.fit)
T
pt(-0.2097491,3,41,0.025)
pf(-0.2097491,3,41,lower.tail=FALSE)
pf(-0.2097491,3,41,0.025)
shiny::runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
shiny::runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
library(shiny)
library(shiny.router)
install.packages("shiny.router")
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
install.packages("shiny.router")
install.packages("shinydashboard")
shiny::runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
library(shiny)
source("carouselPanel.R")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(dplyr)
library(stringr)
library(png)
library(shinyjs)
library(DT)
install.packages("shinyjs")
library(DT)
library(visNetwork)
install.packages("visNetwork")
library(rintrojs)
div(class = sprintf("panel panel-%s", class_type),
div(class = "panel-body", content)
)
runApp('C:/NUS/Y3S1/DSA3101/Project/projectdraft01')
q2.dat <- readExcel("../data/insurance.txt", header =TRUE)
libary(Matrix)
library(Matrix)
q2.dat <- readExcel("../data/insurance.txt", header =TRUE)
q2.dat <- read_excel("../data/insurance.txt", header =TRUE)
q2.dat <- read_table("../data/insurance.txt", header =TRUE)
q2.dat <- read_xl("../data/insurance.txt", header =TRUE)
q2.dat <- readRDS("../data/insurance.txt", header =TRUE)
q2.dat <- read.table("../data/insurance.txt", header =TRUE)
insur.dat <- read.table("../data/insurance.txt", header =TRUE)
full.fit = glm(log.Y.~X1+X2+X3+X4+X5+X6+X7+X8,data=insur.dat)
CV.1.f = cv.glm(insur.dat,full.fit)$delta[2]
library(glmnet)
CV.1.f = cv.glm(insur.dat,full.fit)$delta[2]
library(boot)
CV.1.f = cv.glm(insur.dat,full.fit)$delta[2]
CV.k.f = cv.glm(insur.dat,full.fit,K=11)$delta[2]
c(CV.1.f, CV.k.f)
CV.1.f = cv.glm(insur.dat,full.fit)$delta[2]
CV.k.f = cv.glm(insur.dat,full.fit,K=11)$delta[2]
c(CV.1.f, CV.k.f)
CV.1.f = cv.glm(insur.dat,full.fit)$delta[2]
CV.k.f = cv.glm(insur.dat,full.fit,K=11)$delta[2]
c(CV.1.f, CV.k.f)
CV.1.f = cv.glm(insur.dat,full.fit)$delta[2]
CV.k.f = cv.glm(insur.dat,full.fit,K=11)$delta[2]
c(CV.1.f, CV.k.f)
set.seed(12345)
r=1
CV=NULL
while (r<=4) {
CV.1.f = cv.glm(insur.dat,glm.fit)$delta[2]
CV.k.f = cv.glm(insur.dat,glm.fit,K=11)$delta[2]
CV=rbind(CV, c(CV.1.f, CV.k.f) )
r=r+1
}
r=r+1}
while (r<=4) {
CV.1.f = cv.glm(insur.dat,glm.fit)$delta[2]
CV.k.f = cv.glm(insur.dat,glm.fit,K=11)$delta[2]
CV=rbind(CV, c(CV.1.f, CV.k.f) )
r=r+1
}
CV
CV=NULL
while (r<=4) {
CV.1.f = cv.glm(insur.dat,glm.fit)$delta[2]
CV.k.f = cv.glm(insur.dat,glm.fit,K=11)$delta[2]
CV=rbind(CV, c(CV.1.f, CV.k.f) )
r=r+1
}
SMSA <- read.table("../data/SMSA.csv")
SMSA <- read.txt("../data/SMSA.txt")
SMSA <- readRDS("../data/SMSA.txt")
SMSA <- read.table("../data/SMSA.txt")
SMSA <- read.table("../data/SMSA.txt", header = TRUE)
fit.1 = lm(y~1, data=SMSA)
fit.2 = lm(y~x1+x2+x3+x4+x5+x6, data=SMSA)
fit.2 = lm(y~x1+x2+x3+x4+x5+x6, data=SMSA)
fit.2 = lm(y~x8+X9+X5+x2+x10+x1, data=SMSA)
fit.2 = lm(y.p~x8+X9+X5+x2+x10+x1, data=SMSA)
library(shiny); runApp('C:/NUS/dsa3101-2210-07-data-science/Frontend/Draft_1.R')
SMSA.dat = read.table("../data/SMSA.txt",header=TRUE)
y=SMSA.dat$doctor; x1=SMSA.dat$Land; x2=SMSA.dat$T.p; x3=SMSA.dat$P.city;
x4=SMSA.dat$p.65; x5=SMSA.dat$beds; x6=SMSA.dat$h.sch;x7=SMSA.dat$labor;
x8=SMSA.dat$income; x9=SMSA.dat$crimes;
x10=factor(SMSA.dat$region);
p.dat=data.frame(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)
## (i) selecting models
library(MASS)
# Starting models for the selection procedure:
null1 = lm(y~1, data=p.dat); null2 = lm(y~x10, data=p.dat)
# Selection with null model as starting model
f1=stepAIC(null1,scope=list(upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10,lower=~1),
direction="forward")
summary(f1)
# Selection with starting model containg x10
f2=stepAIC(null2,scope=list(upper=~x1+x2+x3+x4+x5+x6+x7+x8+x9+x10,lower=~x10),
direction="forward")
summary(f2)
shiny::runApp('C:/NUS/dsa3101-2210-07-data-science/Frontend/draft2')
runApp()
runApp('C:/NUS/dsa3101-2210-07-data-science/Frontend/draft2')
runApp()
runApp('C:/NUS/dsa3101-2210-07-data-science/Frontend/draft2')
